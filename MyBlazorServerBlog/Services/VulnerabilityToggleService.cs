// filepath: c:\Users\jitar\RiderProjects\MyBlazorServerBlog\MyBlazorServerBlog\Services\VulnerabilityToggleService.cs
using Microsoft.Extensions.Options;

namespace MyBlazorServerBlog.Services;

public class VulnerabilitiesOptions
{
    public string VulnerabilityMode { get; set; } = "Secure"; // Secure | Vulnerable
    public bool SqlInjection { get; set; }
    public bool Xss { get; set; }
    public bool VerboseErrors { get; set; }
    public bool LogicFlaw { get; set; }
    public bool AuthorizationBypass { get; set; }
    public bool AuthenticationBypass { get; set; }
    public bool VulnerableThirdParty { get; set; }
    public bool SessionHandlingFlaw { get; set; }
    public bool Csrf { get; set; }
    public bool SourceCodeDisclosure { get; set; }
}

public class VulnerabilityToggleService
{
    private readonly IOptionsMonitor<VulnerabilitiesOptions> _opts;
    public VulnerabilityToggleService(IOptionsMonitor<VulnerabilitiesOptions> opts)
    {
        _opts = opts;
    }

    private VulnerabilitiesOptions O => _opts.CurrentValue;

    public bool IsVulnerableMode => string.Equals(O.VulnerabilityMode, "Vulnerable", StringComparison.OrdinalIgnoreCase);

    public bool SqlInjection => O.SqlInjection && IsVulnerableMode;
    public bool Xss => O.Xss && IsVulnerableMode;
    public bool VerboseErrors => O.VerboseErrors && IsVulnerableMode;
    public bool LogicFlaw => O.LogicFlaw && IsVulnerableMode;
    public bool AuthorizationBypass => O.AuthorizationBypass && IsVulnerableMode;
    public bool AuthenticationBypass => O.AuthenticationBypass && IsVulnerableMode;
    public bool VulnerableThirdParty => O.VulnerableThirdParty && IsVulnerableMode;
    public bool SessionHandlingFlaw => O.SessionHandlingFlaw && IsVulnerableMode;
    public bool Csrf => O.Csrf && IsVulnerableMode;
    public bool SourceCodeDisclosure => O.SourceCodeDisclosure && IsVulnerableMode;
}
