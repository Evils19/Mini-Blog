@page "/posts/{id:int}"
@inject BlogDbContext Db
@inject NavigationManager Nav
@using System.Timers
<link href="css/postdetails.css" rel="stylesheet" />
<style>
    /* Post Details - Design îmbunătățit */

    .post-details-bg {
        background: linear-gradient(135deg, #f5f7fa 0%, #e8eef5 100%);
        min-height: 100vh;
        padding: 2rem 1rem;
    }

    .post-details-article {
        background: white;
        border-radius: 16px;
        padding: 2.5rem;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
        transition: box-shadow 0.3s ease;
    }

    .post-details-article:hover {
        box-shadow: 0 8px 30px rgba(0, 0, 0, 0.12);
    }

    .post-details-article h1 {
        color: #1a202c;
        font-size: 2.5rem;
        font-weight: 700;
        line-height: 1.2;
        margin-bottom: 0.75rem;
    }

    .post-content {
        color: #2d3748;
        font-size: 1.125rem;
        line-height: 1.8;
        padding: 1.5rem 0;
        border-top: 2px solid #e2e8f0;
        border-bottom: 2px solid #e2e8f0;
        margin: 1.5rem 0;
    }

    /* Comments Section */
    .post-details-comments {
        background: white;
        border-radius: 16px;
        padding: 2rem;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
    }

    .post-details-comments h3 {
        color: #1a202c;
        font-weight: 600;
        border-bottom: 3px solid #4299e1;
        padding-bottom: 0.75rem;
        display: inline-block;
    }

    .post-details-comments .list-group-item {
        border: none;
        border-bottom: 1px solid #e2e8f0;
        padding: 1.5rem 1rem;
        background: transparent;
        transition: background-color 0.3s ease;
    }

    .post-details-comments .list-group-item:hover {
        background-color: #f7fafc;
    }

    .post-details-comments .list-group-item:last-child {
        border-bottom: none;
    }

    .post-details-comments strong {
        color: #2b6cb0;
        font-size: 1.05rem;
    }

    /* Comment highlight animation */
    .comment-highlight {
        animation: highlightFade 2s ease-in-out;
        background-color: #bee3f8 !important;
    }

    @@keyframes highlightFade {
        0% {
            background-color: #bee3f8;
        }
        100% {
            background-color: transparent;
        }
    }

    /* Form Section */
    .post-details-form {
        background: white;
        border-radius: 16px;
        padding: 2rem;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
    }

    .post-details-form h4 {
        color: #1a202c;
        font-weight: 600;
        border-bottom: 3px solid #48bb78;
        padding-bottom: 0.75rem;
        display: inline-block;
    }

    .post-details-form .form-control {
        border: 2px solid #e2e8f0;
        border-radius: 8px;
        padding: 0.75rem;
        font-size: 1rem;
        transition: all 0.3s ease;
    }

    .post-details-form .form-control:focus {
        border-color: #4299e1;
        box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.1);
        outline: none;
    }

    .post-details-form .form-label {
        font-weight: 600;
        color: #2d3748;
        margin-bottom: 0.5rem;
    }

    /* Buttons */
    .btn {
        border-radius: 8px;
        padding: 0.65rem 1.5rem;
        font-weight: 500;
        transition: all 0.3s ease;
        border: none;
    }

    .btn-primary {
        background: linear-gradient(135deg, #4299e1 0%, #3182ce 100%);
        color: white;
    }

    .btn-primary:hover {
        background: linear-gradient(135deg, #3182ce 0%, #2c5282 100%);
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(66, 153, 225, 0.4);
    }

    .btn-secondary {
        background-color: #718096;
        color: white;
    }

    .btn-secondary:hover {
        background-color: #4a5568;
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(113, 128, 150, 0.4);
    }

    .btn-outline-primary {
        border: 2px solid #4299e1;
        color: #4299e1;
        background: transparent;
    }

    .btn-outline-primary:hover {
        background-color: #4299e1;
        color: white;
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(66, 153, 225, 0.4);
    }

    .btn-danger {
        background-color: #f56565;
        color: white;
    }

    .btn-danger:hover {
        background-color: #e53e3e;
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(245, 101, 101, 0.4);
    }

    /* Alert */
    .alert-info {
        background-color: #bee3f8;
        border: none;
        border-radius: 8px;
        color: #2c5282;
        padding: 1rem;
        border-left: 4px solid #4299e1;
    }

    /* Text utilities */
    .text-muted {
        color: #718096 !important;
        font-size: 0.9rem;
    }

    /* Responsive */
    @@media (max-width: 768px) {
    .post-details-article {
        padding: 1.5rem;
    }

    .post-details-article h1 {
        font-size: 1.875rem;
    }

    .post-content {
        font-size: 1rem;
    }

    .post-details-comments,
    .post-details-form {
        padding: 1.5rem;
    }

    .btn {
        padding: 0.5rem 1rem;
        font-size: 0.9rem;
    }
    }
</style>

<PageTitle>Postare</PageTitle>

@if (_loading)
{
    <p>Se încarcă...</p>
}
else if (_post is null)
{
    <p>Postarea nu a fost găsită.</p>
}
else
{
    <div class="post-details-bg">
        <div class="d-flex justify-content-center">
            <div style="max-width: 700px; width: 100%;">
                <article class="post-details-article my-4">
                    <h1 class="mb-2">@_post.Title</h1>
                    <small class="text-muted">@_post.CreatedAt.ToLocalTime().ToString("f")</small>
                    <div class="mt-3 post-content">@((MarkupString)_post.Content)</div>
                    <div class="mt-3">
                        <a class="btn btn-secondary me-2" href="/posts">Înapoi la listă</a>
                        <a class="btn btn-outline-primary" href="/admin/posts/@_post.Id/edit">Editează</a>
                    </div>
                </article>

                <section class="post-details-comments mt-5">
                    <h3 class="mb-3">Comentarii</h3>
                    @if (_comments is null)
                    {
                        <p>Se încarcă comentariile...</p>
                    }
                    else if (!_comments.Any())
                    {
                        <p class="text-muted">Nu există comentarii.</p>
                    }
                    else
                    {
                        <ul class="list-group list-group-flush">
                            @foreach (var comment in _comments)
                            {
                                var highlight = comment.Id == _lastAddedCommentId ? "comment-highlight" : string.Empty;
                                <li class="list-group-item d-flex justify-content-between align-items-start {highlight}">
                                    <div>
                                        <strong>@comment.Author</strong> <span class="text-muted">@comment.CreatedAt.ToLocalTime().ToString("g")</span>
                                        <div class="mt-1">@comment.Content</div>
                                    </div>
                                    <button class="btn btn-sm btn-danger ms-2" @onclick="() => DeleteCommentAsync(comment.Id)">Șterge</button>
                                </li>
                            }
                        </ul>
                    }
                </section>
                <section class="post-details-form mt-4">
                    <h4 class="mb-3">Adaugă comentariu</h4>
                    <EditForm Model="_newComment" OnValidSubmit="AddCommentAsync">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="mb-2">
                            <label class="form-label">Nume</label>
                            <InputText class="form-control" @bind-Value="_newComment.Author" />
                        </div>
                        <div class="mb-2">
                            <label class="form-label">Comentariu</label>
                            <InputTextArea class="form-control" @bind-Value="_newComment.Content" rows="3" />
                        </div>
                        <button class="btn btn-primary" type="submit">Trimite</button>
                    </EditForm>
                    @if (!string.IsNullOrEmpty(_addCommentMessage))
                    {
                        <div class="alert alert-info mt-2">@_addCommentMessage</div>
                    }
                </section>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public int id { get; set; }
    private Post? _post;
    private bool _loading = true;
    private List<Comment>? _comments;
    private Comment _newComment = new();
    private string? _addCommentMessage;
    private int? _lastAddedCommentId;
    private System.Timers.Timer? _highlightTimer;

    protected override async Task OnParametersSetAsync()
    {
        _post = await Db.Posts.FirstOrDefaultAsync(x => x.Id == id && x.IsPublished);
        if (_post != null)
        {
            _comments = await Db.Comments
                .Where(c => c.PostId == _post.Id)
                .OrderByDescending(c => c.CreatedAt)
                .ToListAsync();
        }
        _loading = false;
    }

    private async Task AddCommentAsync()
    {
        if (_post == null) return;
        _newComment.PostId = _post.Id;
        _newComment.CreatedAt = DateTime.UtcNow;
        Db.Comments.Add(_newComment);
        await Db.SaveChangesAsync();
        _addCommentMessage = "Comentariul a fost adăugat!";
        _comments = await Db.Comments
            .Where(c => c.PostId == _post.Id)
            .OrderByDescending(c => c.CreatedAt)
            .ToListAsync();
        _lastAddedCommentId = _comments.FirstOrDefault()?.Id;
        _newComment = new Comment();
        StateHasChanged();
        // Запускаем таймер для снятия подсветки
        _highlightTimer?.Dispose();
        _highlightTimer = new System.Timers.Timer(2000);
        _highlightTimer.Elapsed += (s, e) => {
            _lastAddedCommentId = null;
            InvokeAsync(StateHasChanged);
            _highlightTimer?.Dispose();
        };
        _highlightTimer.AutoReset = false;
        _highlightTimer.Start();
    }

    private async Task DeleteCommentAsync(int commentId)
    {
        var comment = await Db.Comments.FindAsync(commentId);
        if (comment != null)
        {
            Db.Comments.Remove(comment);
            await Db.SaveChangesAsync();
            _comments = await Db.Comments
                .Where(c => c.PostId == id)
                .OrderByDescending(c => c.CreatedAt)
                .ToListAsync();
            StateHasChanged();
        }
    }
}
